---
description: 
globs: 
alwaysApply: true
---
# Logging Standards

This rule defines the consistent logging patterns used throughout the Saiki codebase.

## **Required Logging Format**

- **Use template literals with `${}` for variables** - Never use comma separation for variables
- **No trailing commas** - Always end parameter lists without trailing commas
- **Consistent parameter order** - Follow the established pattern

## **Examples**

✅ **DO: Correct logging patterns**
```typescript
// Simple message
logger.info('Starting server...');

// Message with variables using template literals
logger.error(`Failed to connect to server: ${error.message}`);
logger.info(`Server running at ${url}`);

// With color styling
logger.info(`Server started successfully`, null, 'green');
logger.error(`Connection failed: ${error}`, null, 'red');

// Complex interpolation
logger.info(`Connected to ${serverName} with ${clientCount} clients`);
```

❌ **DON'T: Avoid these patterns**
```typescript
// Don't use comma separation for variables
logger.error('Failed to connect:', error);
logger.info('Server running at', url);

// Don't use trailing commas
logger.info('Message', null, 'green',);
logger.error('Error occurred',);

// Don't mix patterns
logger.error('Failed to connect: ' + error.message);
```

## **Standard Patterns**

### **Error Logging**
```typescript
// For caught errors
logger.error(`Operation failed: ${error.message}`);
logger.error(`Failed to process ${operation}: ${error}`);

// With context
logger.error(`Error in ${functionName}: ${error.message}`);
```

### **Info Logging with Colors**
```typescript
// Status messages
logger.info('Starting operation...', null, 'cyan');
logger.info(`✅ Operation completed successfully`, null, 'green');
logger.info(`⚠️  Warning: ${message}`, null, 'yellow');

// Progress indicators
logger.info(`Processing ${count} items...`, null, 'blue');
```

### **Debug Logging**
```typescript
// Debug information
logger.debug(`Debug info: ${JSON.stringify(data)}`);
logger.debug(`Function ${name} called with args: ${args.join(', ')}`);
```

## **Color Usage**

- **green**: Success messages, completions
- **red**: Errors, failures  
- **yellow**: Warnings, important notices
- **cyan/cyanBright**: Status updates, starting operations
- **blue**: Information, progress
- **magenta**: Special highlighting
- **gray**: Secondary information

## **Best Practices**

- **Be descriptive**: Include context about what failed and where
- **Use appropriate log levels**: error for failures, info for status, debug for development
- **Include relevant variables**: Always show the values that help debugging
- **Keep messages concise**: But include enough detail for troubleshooting
- **Use consistent terminology**: Stick to established naming patterns
