# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Saiki Multi-Mode Docker Compose Configuration
# Run with: docker compose up <service-name>
# Examples:
#   docker compose up web      # Web UI mode
#   docker compose up server   # API server mode  
#   docker compose up discord  # Discord bot mode
#   docker compose up telegram # Telegram bot mode

services:
  # Web UI Mode - Main interactive interface
  web:
    build:
      context: .
      target: production
    container_name: saiki-web
    env_file:
      - .env
    environment:
      NODE_ENV: production
      SAIKI_MODE: web
      FRONTEND_PORT: 3000
      API_PORT: 3001
      API_URL: http://localhost:3001
      FRONTEND_URL: http://localhost:3000
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
    ports:
      - "${WEB_PORT:-3000}:3000"      # Frontend port
      - "${API_PORT:-3001}:3001"      # API + WebSocket port
    volumes:
      - ./data:/usr/src/app/data:rw
      - ./logs:/usr/src/app/logs:rw
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Server Mode - REST API and WebSocket endpoints only
  server:
    build:
      context: .
      target: production
    container_name: saiki-server
    env_file:
      - .env
    environment:
      NODE_ENV: production
      SAIKI_MODE: server
      API_PORT: 3001
    ports:
      - "${SERVER_PORT:-3001}:3001"   # API + WebSocket port
    volumes:
      - ./data:/usr/src/app/data:rw
      - ./logs:/usr/src/app/logs:rw
    restart: unless-stopped
    command: ["--mode", "server", "--web-port", "3001"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Discord Bot Mode
  discord:
    build:
      context: .
      target: production
    container_name: saiki-discord
    env_file:
      - .env
    environment:
      NODE_ENV: production
      SAIKI_MODE: discord
    volumes:
      - ./data:/usr/src/app/data:rw
      - ./logs:/usr/src/app/logs:rw
    restart: unless-stopped
    command: ["--mode", "discord"]

  # Telegram Bot Mode
  telegram:
    build:
      context: .
      target: production
    container_name: saiki-telegram
    env_file:
      - .env
    environment:
      NODE_ENV: production
      SAIKI_MODE: telegram
    volumes:
      - ./data:/usr/src/app/data:rw
      - ./logs:/usr/src/app/logs:rw
    restart: unless-stopped
    command: ["--mode", "telegram"]

  # Custom Agent Deployment - Use with specific config
  agent:
    build:
      context: .
      target: production
    env_file:
      - .env
    environment:
      NODE_ENV: production
      FRONTEND_PORT: 3000
      API_PORT: 3001
      API_URL: http://localhost:3001
      FRONTEND_URL: http://localhost:3000
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
    ports:
      - "${AGENT_FRONTEND_PORT:-3002}:3000"  # Frontend port
      - "${AGENT_API_PORT:-3003}:3001"       # API + WebSocket port
    volumes:
      - ./data:/usr/src/app/data:rw
      - ./logs:/usr/src/app/logs:rw
      - ${CONFIG_FILE:-./configuration/saiki.yml}:/usr/src/app/agent-config.yml:ro
    restart: unless-stopped
    command: ["--mode", "web", "--config-file", "/usr/src/app/agent-config.yml", "--web-port", "3000"]
    profiles:
      - custom
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# Shared volumes for persistence
volumes:
  saiki_data:
    driver: local
  saiki_logs:
    driver: local

# Network for service communication
networks:
  default:
    name: saiki-network

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

